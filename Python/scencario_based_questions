===================================================================================
Q1) CREATING EC2 INSTANCE USING PYHTON PACKAGE BOTO3 ON ANY CLOUD PROVIDER?
ANS:
import boto3

def create_ec2_instance(region_name):
    # Initialize a session using Amazon EC2 in a specific region
    ec2 = boto3.resource('ec2', region_name=region_name)

    # Create a new EC2 instance
    instances = ec2.create_instances(
        ImageId='ami-0abcdef1234567890',  # Replace with your AMI ID
        MinCount=1,
        MaxCount=1,
        InstanceType='t2.micro',         # Replace with your instance type
        KeyName='your-key-pair',          # Replace with your key pair name
        SecurityGroupIds=['sg-0abcdef1234567890'],  # Replace with your security group ID
        SubnetId='subnet-0abcdef1234567890'        # Replace with your subnet ID
    )

    print("Creating instance...")
    for instance in instances:
        print(f'Instance ID: {instance.id}')

if __name__ == '__main__':
    region = 'us-west-2'  # Replace with your desired AWS region
    create_ec2_instance(region)
===================================================================================
Q2) START STOP TERMINATE THE ALREADY EXISTED EC2 INSTANCE ON ANY CLOUD PROVIDER?
ANS:
import boto3

def terminate_ec2_instance(instance_id, region_name):
    # Initialize a session using Amazon EC2 in a specific region
    ec2_client = boto3.client('ec2', region_name=region_name)
    
    # Terminate the specified instance
    response = ec2_client.terminate_instances(
        InstanceIds=[instance_id]
    )
    
    # Print response to confirm termination
    print(f'Termination response: {response}')

if __name__ == '__main__':
    instance_id = 'i-0abcdef1234567890'  # Replace with your instance ID
    region = 'us-west-2'  # Replace with your desired AWS region
    
    terminate_ec2_instance(instance_id, region)
===========================================================================
==========================================================================

from kubernetes import client, config

def get_pod_status(namespace, pod_name):
    config.load_kube_config()  # Load Kubernetes configuration from default location
    v1 = client.CoreV1Api()  # Create an instance of the CoreV1Api class
    pod = v1.read_namespaced_pod(name=pod_name, namespace=namespace)  # Fetch pod details
    return pod.status.phase  # Return the phase/status of the pod

namespace = 'default'
pod_name = 'my-pod'
status = get_pod_status(namespace, pod_name)
print(f'Pod status: {status}')
===================================================================================
===================================================================================
import docker

client = docker.from_env()  # Create a Docker client instance

def cleanup_docker_images():
    images = client.images.list(filters={'dangling': True})  # List unused (dangling) Docker images
    for image in images:
        client.images.remove(image.id)  # Remove the Docker image
        print(f'Removed image: {image.id}')

cleanup_docker_images()

===================================================================================
===================================================================================
import subprocess
import boto3

def backup_database_and_upload(db_name, s3_bucket, s3_key):
    dump_file = f'/tmp/{db_name}.sql'  # Temporary file to store database dump
    # Execute mysqldump command to create database dump
    subprocess.run(['mysqldump', '-u', 'root', '-p', db_name, '>', dump_file], check=True)
    
    # Upload database dump file to S3 bucket
    s3 = boto3.client('s3')
    s3.upload_file(dump_file, s3_bucket, s3_key)
    print(f'Uploaded {dump_file} to s3://{s3_bucket}/{s3_key}')

backup_database_and_upload('my_database', 'my-s3-bucket', 'backups/my_database.sql')

===================================================================================
===================================================================================
from jenkinsapi.jenkins import Jenkins
import smtplib

def get_job_status(jenkins_url, job_name):
    jenkins = Jenkins(jenkins_url)  # Connect to Jenkins server
    job = jenkins.get_job(job_name)  # Get Jenkins job by name
    last_build = job.get_last_build()  # Get details of last build
    return last_build.get_status()  # Return status of last build

def send_alert(job_name, status):
    message = f"Subject: Jenkins Job Alert\n\nJob {job_name} has status: {status}"
    with smtplib.SMTP('smtp.example.com') as server:  # Replace with your SMTP server
        server.login("your_email@example.com", "your_password")  # Replace with your email credentials
        server.sendmail("your_email@example.com", "alert_recipient@example.com", message)

jenkins_url = 'http://jenkins.example.com'
job_name = 'my_job'
status = get_job_status(jenkins_url, job_name)

if status != 'SUCCESS':
    send_alert(job_name, status)

===================================================================================
===================================================================================
import json

def extract_errors_from_logs(log_file):
    with open(log_file, 'r') as file:
        logs = json.load(file)  # Load JSON data from log file
    
    errors = [log for log in logs if log['level'] == 'ERROR']  # Filter logs for ERROR level
    return errors

errors = extract_errors_from_logs('/var/log/my_app.log')
for error in errors:
    print(error)


===================================================================================
===================================================================================
import paramiko

def create_user_on_server(server, username):
    ssh = paramiko.SSHClient()  # Create SSH client instance
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(server, username='your_username', password='your_password')  # Connect to remote server
    
    # Execute command to create new user
    ssh.exec_command(f'sudo useradd {username}')
    ssh.close()

servers = ['server1.example.com', 'server2.example.com']
username = 'new_user'

for server in servers:
    create_user_on_server(server, username)
    print(f'Created user {username} on {server}')

===================================================================================
===================================================================================
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time

class ChangeHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path == "/path/to/watched/file":
            print(f'{event.src_path} has been modified')

def monitor_file():
    event_handler = ChangeHandler()
    observer = Observer()
    observer.schedule(event_handler, path='/path/to/watched/', recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

monitor_file()

===================================================================================
===================================================================================
import boto3

def update_dns_record(zone_id, record_name, record_type, record_value):
    client = boto3.client('route53')  # Create a Route 53 client
    response = client.change_resource_record_sets(
        HostedZoneId=zone_id,
        ChangeBatch={
            'Changes': [{
                'Action': 'UPSERT',  # Specify UPSERT to create or update record
                'ResourceRecordSet': {
                    'Name': record_name,
                    'Type': record_type,
                    'TTL': 300,
                    'ResourceRecords': [{'Value': record_value}]
                }
            }]
        }
    )
    return response

zone_id = 'Z1234567890'
record_name = 'example.com'
record_type = 'A'
record_value = '192.0.2.1'
response = update_dns_record(zone_id, record_name, record_type, record_value)
print(response)

===================================================================================
===================================================================================
import os
import shutil
from datetime import datetime

def rotate_logs(log_file):
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')  # Generate timestamp
    backup_file = f'{log_file}.{timestamp}'  # Rename existing log file with timestamp
    shutil.move(log_file, backup_file)  # Move existing log file to backup file
    open(log_file, 'w').close()  # Create a new empty log file

log_file = '/var/log/my_app.log'
rotate_logs(log_file)
print(f'Rotated log file: {log_file}')
===================================================================================
===================================================================================
import requests

def fetch_prometheus_metrics(prometheus_url, query):
    response = requests.get(f'{prometheus_url}/api/v1/query', params={'query': query})  # Query Prometheus API
    result = response.json()  # Parse JSON response
    return result['data']['result']  # Return metrics data

prometheus_url = 'http://prometheus.example.com'
query = 'up'  # Example Prometheus query
metrics = fetch_prometheus_metrics(prometheus_url, query)
for metric in metrics:
    print(metric)
===================================================================================
===================================================================================
import paramiko

def check_and_restart_service(server, process_name, service_name):
    ssh = paramiko.SSHClient()  # Create SSH client instance
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(server, username='your_username', password='your_password')  # Connect to remote server
    
    # Check if process is running
    stdin, stdout, stderr = ssh.exec_command(f'pgrep -f {process_name}')
    process_id = stdout.read().strip()
    
    if not process_id:  # If process is not running, restart the service
        ssh.exec_command(f'sudo systemctl restart {service_name}')
        print(f'Restarted service {service_name} on {server}')
    
    ssh.close()

servers = ['server1.example.com', 'server2.example.com']
process_name = 'my_process'
service_name = 'my_service'

for server in servers:
    check_and_restart_service(server, process_name, service_name)
===================================================================================
===================================================================================
import boto3

def list_iam_users():
    iam = boto3.client('iam')  # Create an IAM client instance
    response = iam.list_users()  # List IAM users
    users = [user['UserName'] for user in response['Users']]  # Extract usernames from response
    return users

users = list_iam_users()
print(f'IAM Users: {users}')
===================================================================================
===================================================================================
import psutil

def monitor_and_kill_process(process_name, memory_threshold):
    # Iterate over all processes
    for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
        if proc.info['name'] == process_name:
            # Get the memory usage in MB
            memory_usage = proc.info['memory_info'].rss / (1024 * 1024)
            
            # Kill the process if it exceeds the memory threshold
            if memory_usage > memory_threshold:
                proc.kill()
                print(f'Killed process {proc.info["pid"]} for exceeding memory threshold')
                break

# Define the process name and memory threshold (in MB)
process_name = 'my_process'
memory_threshold = 500

# Monitor and kill the process if it exceeds the memory threshold
monitor_and_kill_process(process_name, memory_threshold)
===================================================================================
===================================================================================
from kubernetes import client, config, utils

def deploy_kubernetes_app(yaml_file):
    # Load the kube config from the default location
    config.load_kube_config()
    
    # Initialize the API client
    k8s_client = client.ApiClient()
    
    # Apply the YAML configuration
    utils.create_from_yaml(k8s_client, yaml_file)
    print(f'Deployed Kubernetes application using {yaml_file}')

# Define the path to the YAML file
yaml_file = 'deployment.yaml'

# Call the function to deploy the Kubernetes application
deploy_kubernetes_app(yaml_file)
===================================================================================
===================================================================================

+++++++++++++++++===Delete the Jenkins Jobs logs++++++++++++++++++++++++++++
import requests
from requests.auth import HTTPBasicAuth

# Configuration
JENKINS_URL = 'http://52.44.57.170:8080/'  # Replace with your Jenkins URL
JENKINS_USER = 'admin'           # Replace with your Jenkins username
JENKINS_API_TOKEN = '11c81bb7222cb88196d9a8b076a7d7765f'     # Replace with your Jenkins API token

def delete_logs(job_name):
    try:
        # Get all builds for the specified job
        builds_url = f'{JENKINS_URL}/job/{job_name}/api/json'
        response = requests.get(builds_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))
        response.raise_for_status()
        builds = response.json().get('builds', [])

        for build in builds:
            build_number = build['number']
            print(f"Processing build {build_number}...")

            # Delete build logs
            if build_number == 1:
                build_url = f'{JENKINS_URL}/job/{job_name}/{build_number}/consoleText'
                response = requests.delete(build_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))
                if response.status_code == 200:
                    print(f"Successfully deleted logs for build {build_number}.")
                else:
                    print(f"Failed to delete logs for build {build_number}. Status code: {response.status_code}")

    except requests.RequestException as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    job_name = 'Infra-Pipeline-Eks-Terraform-Based'  # Replace with your job name
    delete_logs(job_name)
===================================================================================================================
==================================================================================================================
++++++++++++++++++++++++Python Script to Trigger a Jenkins Build++++++++++++++++++++
import requests
from requests.auth import HTTPBasicAuth

# Configuration
JENKINS_URL = 'http://52.44.57.170:8080/'  # Replace with your Jenkins URL
JENKINS_USER = 'admin'           # Replace with your Jenkins username
JENKINS_API_TOKEN = '11c81bb7222cb88196d9a8b076a7d7765f'     # Replace with your Jenkins API token
JOB_NAME = 'amazon-clone-CI-Docker-based'               # Replace with your Jenkins job name

def trigger_build(job_name):
    try:
        # Construct the URL for triggering the build
        build_url = f'{JENKINS_URL}/job/{job_name}/build'

        # Trigger the build
        response = requests.post(
            build_url,
            auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN)
        )

        # Check the response
        if response.status_code == 201:
            print(f"Build triggered successfully for job '{job_name}'.")
        else:
            print(f"Failed to trigger build. Status code: {response.status_code}")
            print(f"Response: {response.text}")

    except requests.RequestException as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    trigger_build(JOB_NAME)
=================================================================================================================
=================================================================================================================
++++++++++++++++++++++++Python Script to DELETE a Failed Jenkins Build++++++++++++++++++++++++++++
import requests
from requests.auth import HTTPBasicAuth

# Configuration
JENKINS_URL = 'http://52.44.57.170:8080/'  # Replace with your Jenkins URL
JENKINS_USER = 'admin'           # Replace with your Jenkins username
JENKINS_API_TOKEN = '11c81bb7222cb88196d9a8b076a7d7765f'     # Replace with your Jenkins API token
JOB_NAME = 'amazon-clone-CI-Docker-based'               # Replace with your Jenkins job name

def delete_failed_builds(job_name):
    try:
        # Get the list of builds
        builds_url = f'{JENKINS_URL}/job/{job_name}/api/json?tree=builds[number,status]'
        response = requests.get(builds_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))
        response.raise_for_status()
        builds = response.json().get('builds', [])

        for build in builds:
            build_number = build['number']
            build_status = build['status']
            
            # Check if the build status is 'FAILURE'
            if build_status == 'FAILURE':
                print(f"Deleting failed build {build_number}...")
                
                # Delete the failed build
                delete_url = f'{JENKINS_URL}/job/{job_name}/{build_number}/doDelete'
                delete_response = requests.post(delete_url, auth=HTTPBasicAuth(JENKINS_USER, JENKINS_API_TOKEN))
                
                if delete_response.status_code == 200:
                    print(f"Successfully deleted build {build_number}.")
                else:
                    print(f"Failed to delete build {build_number}. Status code: {delete_response.status_code}")
                    print(f"Response: {delete_response.text}")
            else:
                print(f"Build {build_number} did not fail; status: {build_status}")

    except requests.RequestException as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    delete_failed_builds(JOB_NAME)


